package tarehart.rlbot.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import tarehart.rlbot.Bot;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class StatusSummary {
    private JPanel rootPanel;
    private JLabel portLbl;
    private JPanel playerPane;

    public StatusSummary() {
        $$$setupUI$$$();
    }

    public void markTeamRunning(Bot.Team team, int playerIndex, JFrame debugPanel) {

        StatusLineItem lineItem = new StatusLineItem(team, playerIndex, debugPanel);

        int i;
        for (i = 0; i < playerPane.getComponentCount(); i++) {
            if (((StatusLineItem) playerPane.getComponent(i)).getPlayerIndex() > playerIndex) {
                break;
            }
        }
        playerPane.add(lineItem, null, i);
        lineItem.validate();
        playerPane.revalidate();

        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(rootPanel);
        topFrame.pack();
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public void setPort(int port) {
        portLbl.setText(String.format("Port %s", port));
    }

    private void createUIComponents() {
        playerPane = new JPanel();
        playerPane.setLayout(new BoxLayout(playerPane, BoxLayout.Y_AXIS));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 2, new Insets(5, 5, 5, 5), -1, -1));
        portLbl = new JLabel();
        portLbl.setText("Label");
        rootPanel.add(portLbl, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        playerPane.setEnabled(true);
        rootPanel.add(playerPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, -1), null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
